#!groovy
def appName = "cars-frontend"
def project = env.PROJECT_NAME

script {

}

pipeline {
  agent {
    kubernetes {
      cloud 'openshift'
      label 'jos-nodejs-10'
      yaml """
kind: Pod
metadata:
  name: jenkins-slave
spec:
  containers:
  - name: jnlp
    image: docker-registry.default.svc:5000/public/jenkins-jos-agent-nodejs-10:production
    imagePullPolicy: Always
      """
    }
  }
  stages{
    stage ('Test & Build'){
      steps{
        // registry setting moet in het jos-nodejs-10 image worden opgelost. 
        // Tot die tijd even zo met een setting hier in de pipeline.
        // Testen moeten met Selenium Hub gaan werken. Gaan we nog onderzoeken.
        // npm -g config set registry http://jsccnexus.ont.belastingdienst.nl/repository/npm/
        sh '''
          npm install
        '''
        // sh 'npm run test'
        sh '''
          npm run lint
          npm run prod-build
          cp nginx/nginx.conf dist/client/.
        '''
        stash(name: 'dist', includes: 'dist/client/**')
      }
    }
    stage('Create Image Builder') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("bc", "cars-frontend").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
              openshift.newBuild("--name=cars-frontend", "--image-stream=openshift/nginx", "--binary=true")
          }
        }
      }
    }
    stage('Build Image') {
      steps {
        unstash 'dist'
        script {
          openshift.withCluster() {
            openshift.selector("bc", "cars-frontend").startBuild("--from-dir=dist/client", "--wait=true")
          }
        }
      }
    }
    stage('Create dc in O') {
      when {
        expression {
          openshift.withCluster() {
            return !openshift.selector("dc", "cars-frontend").exists();
          }
        }
      }
      steps {
        script {
          openshift.withCluster() {
            // ruim eerst de objecten op die evt zijn blijven staan..om fout meldingen te voorkomen.
            if (openshift.selector('dc', "${appName}").exists()) {
              openshift.selector('dc', "${appName}").delete()
            }
            if (openshift.selector('svc', "${appName}").exists()) {
              openshift.selector('svc', "${appName}").delete()
            }
            if (openshift.selector('route', "${appName}").exists()) {
              openshift.selector('route', "${appName}").delete()
            }
            // maak op basis van deze List de benodigde objecten aan (dc,svc en route)
            // de deployment config gebruik de applicatie image met tag 'latest'
            // en de trigger in om te deployen bij image change staat uitgeschakeld,
            // om dat Jekins bepaald wanneer er gedeloyed gaat worden en niet de trigger.

            def fromYAML = openshift.create( readFile('openshift/cars-frontend-o.yaml'))
            echo "Created objects from YAML file: ${fromYAML.names()}"
          }
        }
      }          
    }
    stage('Deploy in O') {
      steps {
        script {
          openshift.withCluster() {
            def dc = openshift.selector("dc", appName)
            dc.rollout().latest();
            // wachten tot alle replicas beschikbaar zijn.
            while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                echo "Wait for all replicas are available"
                sleep 10
            }
          }
        }
      }
    }
  }
}